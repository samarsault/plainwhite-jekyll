---
layout: post
title:  "20-07-09  About Method"
#date:   2019-03-23 21:03:36 +0530
categories: java
---

메소드에 대한 이해
================

메소드를 이용한 팩토리얼! 계산
----------------------------

```java
package day10;

import java.util.Scanner;

public class p132_Method3 {
	
	public static long fact(int a) {
		long fac = 1; // long형 8byte 정수형 자료형
		for(int n = a; n>=1; n--) {
			fac *= n;
			
		}
		
		return fac;
	}//fact end
	
	public static int fact1(int num) {
		//재귀호출 : 자기자신 호출
		// 3! = 3 * 2 * 1
		// n! = n * (n-1) * 1
		if(num==0) 
			return 1;
		else
			return num * fact1(num-1);
		// 
	}
	
	
	
	public static void main(String[] args) {
		
		// 팩토리얼 : 3!= 3*2*1
		// 1.입력 num!
		// 2.처리 for문을 통해서 반복처리할 것 { fac *= n;} ---> fact()메소드
		// 3.출력
		
		int num = 3;
		long result = fact(num);
		
		System.out.println(num + "! : " + result);
		long result1 = fact1(num);
		System.out.println(num + "! : " + result);

		}//main end
	
	
}//class end
```

메소드 메개변수 전달방법
----------------------

```java
package day10;

public class p132_Method4 {
	
	public static void callTest1() {
		System.out.println("Hello, Java");
	}//callTest1 end
	
	public static void callTest2(int a) {
		for (int i=1; i<=a; i++) {
			System.out.println("Hello, Java");
		}
	}//callTest2 end
	
	public static int callTest3() {
		int result = 0;
		for (int i=1; i<=100; i++) {
			if(i%2==1)
			result += i;
		}
		return result;
	}//callTest3 end
	
	public static double callTest4(double a, double b) {
		double result = a*b;
		return result;
	}
	
	
	public static void main(String[] args) {
		// 1. 실인수, 반환값이 모두 없는 경우
		//    : "Hello, Java"를 출력하는 메소드를 (callTest1)만들고 main()에서 출력
		callTest1();
		System.out.println("Test1 end");
		System.out.println("===");
		
		// 2. 실인수 있고, 반환값 없는 경우
		//    :매개 변수로 획수를 받아 그 횟수 만큼 "Hello, Java"를 출력하는 메소드(callTest2)
		callTest2(5);
		System.out.println("Test2 end");
		System.out.println("===");
		
		// 3. 실인수 없고, 반환값 있는 경우
		//    : 1~100까지의 홀수의 합을 구하고 그 값을 반환해주는 메소드(callTest3)를 만들고 
		//      main()에서 그 값을 출력
		System.out.println(callTest3());
		System.out.println("Test3 end");
		System.out.println("===");
		
		
		// 4. 실인수, 반환값이 모두 있는 경우
		//    : 임의의 두 실수를 매개변수로 전달받아 두 수의 곱을 구하는 메소드(callTest4)를 만들고
		//      main()에서 그 값을 받아서 출력
		System.out.println(callTest4(3.4, 5.2));
		System.out.println("Test4 end");
		System.out.println("===");
		
	}

}


/*=== 매개변수 전달 방법 ===
 * 
 *인수 = 인자 = 매개변수 = parameter = argument
 *
 *
 *   호출하는 함수                  호출당하는 함수
 *
 *  caller  ----> call ----> callee
 *         <--- return <---
 *   실인수                                     가인수
 *    X			              X
 *    O		         	      X
 *    X                       O
 *    O                       O
 *
 *1. Call by value (값에 의한 전달)
 *  : 실인수에 (상수0값이 전달되는 호출, 가인수 영역에서 값 복사, return문(1개)
 *2. Call by Address(Pointer) (주소에 의한 전달)
 *3. Call by Reference (참조에 의한 전달)
 *
 * 
 */
```

메소드를 이용한 도형의 넓이 구하기
--------------------------------

```java
package day10;

public class p132_Method5 {
	
	public static int area1(int length, int width) {
		int area = length * width;
		return area;
	}
	
	public static double area2(int r) {
		double area = Math.PI * r * r;
		return area;
	}
	
	public static void main(String[] args) {
		
		  // 1. 사각형의 가로(length)와 세로(width)길이를 전달 받아 넓이를 구하는 메서드를 만들고
		  // :  main()에서 넓이 값을 받아 출력하는 메서드를(area1)만들고 main()에서 호출
		int num1 = 3; 
		int num2 = 4;
		System.out.println("가로가" + num1 + "이고 세로가 " + num2 + "인 사각형의 넓이는?");
		System.out.println("사각형의 넓이는" + area1(num1, num2) + "입니다.");

		  // 2. 원의 반지름(radius)길이를 전달 받아 넓이를 구하는 메서드를 만들고
		  // :  main()에서 넓이 값을 받아 출력하는 메서드를(area2)만들고 main()에서 호출
		int radius = 3;
		System.out.println("반지름이" + radius + "인 원의 넓이는?");
		System.out.printf("원의 넓이는 %.2f입니다.", area2(3));
	}

}
```

메소드 오버로딩(overloading)이란
-------------------------------

```java
package day10;

public class p132_Method6 {
	
	public static int add1(int a, int b) {
		return a+b;
	}
	
	public static double add2(double a, double b) {
		return a*b;
	}
	
	public static char add3(char a, char b) {
		return (char) (a+b);
	}
	
	public static String add4(String a, String b) {
		return (String) (a+b);
	}
	
	public static void main(String[] args) {
		// 메소드 오버로딩(overloading) <--- 메소드 중복(다형성)
		// :(한 클래스 내에서...) 
		//   메소드명은 같고,
		//   매개변수의 갯수 또는 자료형이 다른 경우
		
		int r1 = add1(10, 20);// 두 정수의 덧셈
		double r2 = add2(1.1, 2.2);// 두 실수의 덧셈
		char r3 = add3('1','A');// 두 (단일)문자의 덧셈
		String r4 = add4("Hello", "Java");// 두 문자열의 덧셈
		System.out.println(r1);
		System.out.println(r2);
		System.out.println(r3);
		System.out.println(r4);
		
		
	}

}
```
